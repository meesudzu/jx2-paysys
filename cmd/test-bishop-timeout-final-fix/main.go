package main

import (
	"fmt"
	"log"
	"os"
	
	"jx2-paysys/internal/protocol"
)

func main() {
	fmt.Println("=== Testing Final Bishop ProcessVerifyReplyFromPaysys Timeout Fix ===")
	
	// Suppress debug logs for cleaner output
	log.SetOutput(os.Stderr)
	
	// Test the exact tester_3 scenario that was causing ProcessVerifyReplyFromPaysys timeout
	fmt.Println("Testing tester_3 hybrid protocol format...")
	
	// Simulate the exact 229-byte packet that was causing timeout
	bishopRequestData := []byte{
		// Header: e5 00 ff 38 (229 bytes, protocol 0x38ff)
		0xe5, 0x00, 0xff, 0x38,
		// First 32 bytes: XOR key header (ad692ba79d670c500ea5aec317fba5ad repeated)
		0xad, 0x69, 0x2b, 0xa7, 0x9d, 0x67, 0x0c, 0x50, 0x0e, 0xa5, 0xae, 0xc3, 0x17, 0xfb, 0xa5, 0xad,
		0xad, 0x69, 0x2b, 0xa7, 0x9d, 0x67, 0x0c, 0x50, 0x0e, 0xa5, 0xae, 0xc3, 0x17, 0xfb, 0xa5, 0xad,
		// After byte 32: Plain text login data "tester_3\0MD5_HASH..."
		0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x33, 0x00, // "tester_3\0"
		0x35, 0x44, 0x34, 0x31, 0x34, 0x30, 0x32, 0x41, 0x42, 0x43, 0x34, 0x42, 0x32, 0x41, 0x37, 0x36,
		0x42, 0x39, 0x37, 0x31, 0x39, 0x44, 0x39, 0x31, 0x31, 0x30, 0x31, 0x37, 0x43, 0x35, 0x39, 0x32,
		// Padding
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, // Total: 225 bytes of data + 4 bytes header = 229 bytes
	}
	
	fmt.Printf("Simulating Bishop request: %d bytes, protocol 0x%04x\n", len(bishopRequestData), 0x38ff)
	
	// Test the hybrid protocol detection
	if len(bishopRequestData) >= 36 { // 4 bytes header + 32 bytes XOR key header
		keyHeader := bishopRequestData[4:20]    // First 16 bytes of XOR key
		keyHeader2 := bishopRequestData[20:36]  // Second 16 bytes (should be same)
		
		fmt.Printf("XOR key header 1: %x\n", keyHeader)
		fmt.Printf("XOR key header 2: %x\n", keyHeader2)
		
		if string(keyHeader) == string(keyHeader2) {
			fmt.Println("✅ Hybrid protocol format detected correctly")
			
			// Extract login data (plain text after byte 36)
			loginData := bishopRequestData[36:]
			fmt.Printf("Login data: %x\n", loginData)
			fmt.Printf("Login data as text: %q\n", string(loginData))
			
			// Test parsing
			username, password, err := protocol.ParseLoginDataFast(loginData)
			if err != nil {
				fmt.Printf("❌ ParseLoginDataFast failed: %v\n", err)
				return
			}
			
			fmt.Printf("✅ Username: %q\n", username)
			fmt.Printf("✅ Password: %q\n", password)
			
			if username == "tester_3" && len(password) == 32 {
				fmt.Println("✅ Credentials extracted correctly")
				
				// Test the new Bishop response format
				successResponse := protocol.CreateBishopVerifyResponse(0, "Login successful")
				fmt.Printf("✅ Success response created: %d bytes\n", len(successResponse))
				fmt.Printf("Response data: %x\n", successResponse)
				
				// Verify response format
				if len(successResponse) >= 4 {
					size := uint16(successResponse[0]) | (uint16(successResponse[1]) << 8)
					protocolType := uint16(successResponse[2]) | (uint16(successResponse[3]) << 8)
					fmt.Printf("✅ Response format - Size: %d, Protocol: 0x%04x\n", size, protocolType)
					
					if size == uint16(len(successResponse)) && protocolType == 0xff38 {
						fmt.Println("✅ Response format is correct - should prevent ProcessVerifyReplyFromPaysys timeout")
					} else {
						fmt.Println("❌ Response format incorrect")
					}
				}
				
				// Test error response too
				errorResponse := protocol.CreateBishopVerifyResponse(3, "Authentication failed")
				fmt.Printf("✅ Error response created: %d bytes\n", len(errorResponse))
				fmt.Printf("Error response data: %x\n", errorResponse)
				
			} else {
				fmt.Println("❌ Credentials not extracted correctly")
				return
			}
			
		} else {
			fmt.Println("❌ Hybrid protocol format not detected")
			return
		}
	}
	
	fmt.Println("\n=== Test Results ===")
	fmt.Println("✅ Hybrid protocol detection working")
	fmt.Println("✅ Login data extraction working")
	fmt.Println("✅ Credential parsing working")
	fmt.Println("✅ Bishop response format implemented")
	fmt.Println("✅ Should fix ProcessVerifyReplyFromPaysys timeout for tester_3")
	fmt.Println("\nThe fix correctly handles the hybrid protocol format where:")
	fmt.Println("  - First 32 bytes: XOR key repeated twice")
	fmt.Println("  - Remaining bytes: Plain text login data")
	fmt.Println("  - Response: Compact format with protocol 0xff38 (should not timeout)")
}